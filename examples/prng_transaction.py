"""
Example demonstrating PRNG (Pseudo-Random Number Generator) transaction functionality.

The PRNG transaction is a transaction that generates a pseudo-random number.

You can set the range for the PRNG transaction to generate a pseudo-random number within a range.
If no range is set, the PRNG transaction will generate a 48 byte unsigned pseudo-random number.
"""

import os
import sys

from dotenv import load_dotenv

from hiero_sdk_python import AccountId, Client, Network, PrivateKey
from hiero_sdk_python.prng_transaction import PrngTransaction
from hiero_sdk_python.query.transaction_record_query import TransactionRecordQuery
from hiero_sdk_python.response_code import ResponseCode

load_dotenv()


def setup_client():
    """Initialize and set up the client with operator account"""
    network = Network(network="testnet")
    client = Client(network)

    operator_id = AccountId.from_string(os.getenv("OPERATOR_ID"))
    operator_key = PrivateKey.from_string(os.getenv("OPERATOR_KEY"))
    client.set_operator(operator_id, operator_key)

    return client


def prng_with_range(client, range_value):
    """Generate a pseudo-random number within a specified range"""
    receipt = PrngTransaction().set_range(range_value).execute(client)

    if receipt.status != ResponseCode.SUCCESS:
        print(f"PRNG transaction failed with status: {ResponseCode(receipt.status).name}")
        sys.exit(1)

    # Get the transaction record to see the generated number
    record = TransactionRecordQuery(receipt.transaction_id).execute(client)

    print(f"Generated PRNG number: {record.prng_number}")
    print(f"Number is within range: 0 to {range_value}")


def prng_without_range(client):
    """Generate pseudo-random bytes without specifying a range"""
    receipt = PrngTransaction().execute(client)

    if receipt.status != ResponseCode.SUCCESS:
        print(f"PRNG transaction failed with status: {ResponseCode(receipt.status).name}")
        sys.exit(1)

    # Get the transaction record to see the generated bytes
    record = TransactionRecordQuery(receipt.transaction_id).execute(client)

    print(f"Generated PRNG bytes length: {len(record.prng_bytes)} bytes")
    print(f"PRNG number: {record.prng_number}")


def prng_transaction():
    """
    Demonstrates PRNG transaction functionality by:
    1. Setting up client with operator account
    2. Generating a random number within a range
    3. Generating random bytes without a range
    """
    client = setup_client()

    # Generate a random number within a range (from 0 to 1000)
    range_value = 1000
    receipt = PrngTransaction().set_range(range_value).execute(client)

    if receipt.status != ResponseCode.SUCCESS:
        print(f"PRNG transaction failed with status: {ResponseCode(receipt.status).name}")
        sys.exit(1)

    # Get the transaction record to see the generated number
    record = TransactionRecordQuery(receipt.transaction_id).execute(client)

    print(f"Generated PRNG number from 0 to {range_value}: {record.prng_number}")

    # Generate random number (48 byte unsigned pseudo-random number) without range
    receipt = PrngTransaction().execute(client)
    # Alternative way of doing it:
    # receipt = PrngTransaction().set_range(0).execute(client)
    # receipt = PrngTransaction().set_range(None).execute(client)

    if receipt.status != ResponseCode.SUCCESS:
        print(f"PRNG transaction failed with status: {ResponseCode(receipt.status).name}")
        sys.exit(1)

    # Get the transaction record to see the generated number in bytes
    record = TransactionRecordQuery(receipt.transaction_id).execute(client)
    print("\nGenerated PRNG number without setting range:")
    print(f"PRNG number in hex: {record.prng_bytes.hex()}")
    print(f"PRNG number length: {len(record.prng_bytes)} bytes")


if __name__ == "__main__":
    prng_transaction()
